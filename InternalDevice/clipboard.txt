For debugging purposes, this file is used to hold code for which it is more convenient to be left out while 
working on other parts of the program. Particularly, the NFC routine in main. 

You can copy-paste all of this into main at the end of the while(1) loop.
--START NFC CODE--
eTempNFCState = NFC_run();

        if(eTempNFCState == NFC_DATA_EXCHANGE_PROTOCOL)
        {
            if(NFC_P2P_getModeStatus(&sP2PMode,&sP2PBitrate))
            {

#if (NFC_PEER_2_PEER_INITIATOR_ENABLED || NFC_PEER_2_PEER_TARGET_ENABLED)
                //
                // Read the receive status structure - check if there is a received packet from the Target
                //
                sP2PRxStatus = NFC_P2P_getReceiveState();
                if(sP2PRxStatus.sDataReceivedStatus != RECEIVED_NO_FRAGMENT)
                {

                    ui16BytesReceived = sP2PRxStatus.ui16DataReceivedLength + ui16BytesReceived;

                    convertWordToAscii(ui16BytesReceived,(uint8_t *)pcBytesReceivedString);

                    //Application specific code:

                    /*int i = 0;
                    int receivedLength = *(sP2PRxStatus.pui8RxDataPtr+2) - 3;
                    for(i = 0; i < receivedLength; ++i) {
                        received[i] = *(sP2PRxStatus.pui8RxDataPtr+7+i);
                    }
                    while(i<230) {
                        int receivedLength = *(sP2PRxStatus.pui8RxDataPtr+2) - 3;
                        received[i] = *(sP2PRxStatus.pui8RxDataPtr+7+i);
                        if(*(sP2PRxStatus.pui8RxDataPtr+7+i) == '!') {
                            newReceived = 1;
                            delaySend = 150;
                            canSend = 0;

                            received[i+1] = 0x00;
                            break;
                        }
                        ++i;
                    }*/
                    int i = 0;
                    int receivedLength;
                    receivedLength = *(sP2PRxStatus.pui8RxDataPtr+2) - 3;
                    for(i = 0; i < receivedLength; ++i) {
                        received[i] = *(sP2PRxStatus.pui8RxDataPtr+7+i);
                        newReceived = 1;
                    }
                    received[receivedLength] = 0;

                    // Check if the last packet was received completely
                    if((uint16_t) sP2PRxStatus.ui32PacketSize == ui16BytesReceived)
                    {
                        // Reset Bytes received
                        ui16BytesReceived = 0;
                    }
                }

                // Check for communication with Host
                if(g_bSerialConnectionEstablished == false)
                {

                    if(ui32PacketRemaining > 0)
                    {
                        if(ui32PacketRemaining < LLCP_MIU)
                        {
                            ui8FragmentSize = (uint8_t) ui32PacketRemaining;
                        }
                        else
                        {
                            ui8FragmentSize = LLCP_MIU;
                        }
                        ui8TXBytes = NFC_P2P_sendNdefPacket((uint8_t *) (pui8NdefPointer+ui16TxIndex),false,ui8FragmentSize,(uint32_t) ui32PacketLength);

                        if(ui8TXBytes)
                        {
                            ui32PacketRemaining = ui32PacketRemaining - (uint16_t) (ui8TXBytes);
                            ui16TxIndex = ui16TxIndex + (uint16_t) ui8TXBytes;
                        }
                    }
                }
#endif
            }
        }

        // Update Current State if it has changed.
        if(eCurrentNFCState != eTempNFCState)
        {
            __no_operation();

            if(eCurrentNFCState != NFC_TARGET_WAIT_FOR_ACTIVATION
                && eCurrentNFCState != NFC_STATE_IDLE
                && (eTempNFCState == NFC_PROTOCOL_ACTIVATION
                    || eTempNFCState == NFC_DISABLED))
            {
                eCurrentNFCState = eTempNFCState;

#if (NFC_PEER_2_PEER_TARGET_ENABLED || NFC_PEER_2_PEER_INITIATOR_ENABLED)
                // Initialize IDs for NFC-A, NFC-B and NFC-F
                NFC_initIDs();
#endif


#if (NFC_PEER_2_PEER_INITIATOR_ENABLED || NFC_PEER_2_PEER_TARGET_ENABLED)
                ui16BytesReceived = 0;
                ui32PacketRemaining = 0;
#endif

            }
            else
            {
                eCurrentNFCState = eTempNFCState;
            }

        }





        if(!p2p_on) {
            g_sP2PSupportedTargetBitrates.ui8byte = 0x07;
            g_sP2PSupportedInitiatorBitrates.ui8byte = 0x07;
            g_sP2PSupportedModes.ui8byte = 0x03;

            NFC_P2P_disable();
            NFC_P2P_configure(g_sP2PSupportedModes,g_sP2PSupportedTargetBitrates,g_sP2PSupportedInitiatorBitrates);
            p2p_on = 1;
        }


        if(delaySend>1) delaySend--;

        if(delaySend == 1) {
          canSend = 1;
        }

        if(newReceived) {
            processReceived();
            newReceived = 0;
        }

        if(actionPending != NONE) {
            switch(actionPending) {
            case SEND_DATA:
                if(canSend) {
                    transmitMessage(received);
                    sendData();
                    actionPending = NONE;
                    canSend = 1;
                }
                break;
            case START_SAMPLES:
                break;
            case CLEAR_DATA:
                dataArray_clear();
                break;
            case SEND_PROGRESS:
                if(canSend) {
                    sendProgress();
                    actionPending = NONE;
                    canSend = 0;
                }
                break;
            }
        }
    
    
--END NFC CODE--